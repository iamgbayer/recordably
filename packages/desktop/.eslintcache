[{"C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\index.tsx":"1","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\App.tsx":"2","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\components\\index.js":"3","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\components\\Reset.js":"4","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\screens\\index.tsx":"5","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\screens\\Area.tsx":"6","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\screens\\styles.tsx":"7","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\configs.js":"8","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\helpers.ts":"9","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\hooks\\index.js":"10","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\hooks\\useTakeScreenshot.js":"11","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\hooks\\useFrames.js":"12"},{"size":226,"mtime":1607984700421,"results":"13","hashOfConfig":"14"},{"size":92,"mtime":1607984715635,"results":"15","hashOfConfig":"14"},{"size":24,"mtime":1607887455312,"results":"16","hashOfConfig":"14"},{"size":369,"mtime":1607887554755,"results":"17","hashOfConfig":"14"},{"size":23,"mtime":1607984826586,"results":"18","hashOfConfig":"14"},{"size":5308,"mtime":1607996611872,"results":"19","hashOfConfig":"14"},{"size":1151,"mtime":1607986719039,"results":"20","hashOfConfig":"14"},{"size":255,"mtime":1607886944594,"results":"21","hashOfConfig":"14"},{"size":2369,"mtime":1607996371702,"results":"22","hashOfConfig":"14"},{"size":64,"mtime":1607835134267,"results":"23","hashOfConfig":"14"},{"size":1872,"mtime":1607886997867,"results":"24","hashOfConfig":"14"},{"size":2934,"mtime":1607887292460,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"69mg7r",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},"C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\index.tsx",[],[],"C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\App.tsx",["58"],"import React from 'react'\nimport { Area } from 'screens'\n\nexport const App = () => <Area />\n","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\components\\index.js",[],[],"C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\components\\Reset.js",[],"C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\screens\\index.tsx",[],"C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\screens\\Area.tsx",["59"],"import { STATUS } from 'configs'\nimport {\n  getIdAndSizeCurrentDisplay,\n  getSourceAndUserMedia,\n  pixelToInteger\n} from 'helpers'\nimport { useFrames, useTakeScreenshot } from 'hooks'\nimport { equals, includes, isNil, merge, path, prop } from 'ramda'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { Rnd, RndResizeCallback } from 'react-rnd'\nimport { Container, Control, Controls, Meta, Overlay, style } from './styles'\n\nconst { ipcRenderer, remote } = window.require('electron')\nconst { setIgnoreMouseEvents } = remote.getCurrentWindow()\n\nexport type MetaProperties = {\n  width: number\n  height: number\n  x: number\n  y: number\n}\n\nexport const Area = () => {\n  const [hasInitiatedResize, setHasInitiatedResize] = useState(false)\n  const [meta, setMeta] = useState<MetaProperties>({\n    width: 10,\n    height: 10,\n    x: 0,\n    y: 0\n  })\n\n  const rnd = useRef<Rnd>(null)\n  const canUpdatePosition = useRef(true)\n\n  const minimize = () => {\n    rnd.current?.updateSize({\n      width: 10,\n      height: 10\n    })\n\n    canUpdatePosition.current = true\n    setHasInitiatedResize(false)\n\n    ipcRenderer.send('minimize')\n  }\n\n  const takeScreenshot = useTakeScreenshot({ meta, minimize })\n  const { finish, start } = useFrames({\n    meta,\n    minimize\n  })\n\n  const [status, setStatus] = useState(STATUS.initial)\n\n  useEffect(() => {\n    window.addEventListener('mousemove', (event) => {\n      canUpdatePosition.current &&\n        rnd.current?.updatePosition({\n          x: event.clientX - 15,\n          y: event.clientY - 15\n        })\n    })\n  }, [])\n\n  /**\n   * @todo Move to App.js\n   */\n  useEffect(() => {\n    const whenEscPressedHideApplication = (event: KeyboardEvent) => {\n      equals(event.key, 'Escape') && minimize()\n    }\n\n    document.addEventListener('keydown', whenEscPressedHideApplication)\n\n    return () =>\n      document.removeEventListener('keydown', whenEscPressedHideApplication)\n  }, [])\n\n  const onTakeScreenshot = () => getSourceAndUserMedia(takeScreenshot)\n\n  const onStartRecordFrames = () => {\n    setStatus(STATUS.recording)\n\n    getSourceAndUserMedia(start)\n    setIgnoreMouseEvents(true, { forward: true })\n  }\n\n  const onFinishRecordFrames = () => {\n    setStatus(STATUS.initial)\n\n    finish()\n  }\n\n  const onCantUpdatePosition: RndResizeCallback = (_event, _direction, ref) => {\n    canUpdatePosition.current = false\n\n    if (isNil(ref)) {\n      return\n    }\n\n    setMeta((meta) =>\n      merge(meta, {\n        width: pixelToInteger(path(['style', 'width'], ref) as string),\n        height: pixelToInteger(path(['style', 'height'], ref) as string)\n      })\n    )\n  }\n\n  /**\n   * @todo Move to App.js\n   */\n  const listenMouseEvents = () =>\n    includes(status, [STATUS.recording, STATUS.initial]) &&\n    setIgnoreMouseEvents(false)\n\n  /**\n   * @todo Move to App.js\n   */\n  const removeListenMouseEvents = () =>\n    includes(status, [STATUS.recording]) &&\n    setIgnoreMouseEvents(true, { forward: true })\n\n  const { size } = getIdAndSizeCurrentDisplay()\n\n  return (\n    <Container>\n      <Rnd\n        ref={rnd}\n        onResize={(_event, _direction, ref, _delta, position) =>\n          setMeta({\n            width: pixelToInteger(path(['style', 'width'], ref) as string),\n            height: pixelToInteger(path(['style', 'height'], ref) as string),\n            x: position.x,\n            y: position.y\n          })\n        }\n        onResizeStart={() => {\n          setHasInitiatedResize(true)\n\n          canUpdatePosition.current = false\n        }}\n        onDragStop={(_event, direction) =>\n          setMeta((meta) =>\n            merge(meta, {\n              x: direction.x,\n              y: direction.y\n            })\n          )\n        }\n        onResizeStop={onCantUpdatePosition}\n        bounds=\"parent\"\n        style={style(hasInitiatedResize) as React.CSSProperties}\n        default={{\n          width: 10,\n          height: 10,\n          x: 0,\n          y: 0\n        }}\n      >\n        {hasInitiatedResize && (\n          <Meta>\n            {prop('width', meta)} x {prop('height', meta)}\n          </Meta>\n        )}\n\n        <Controls\n          onMouseEnter={listenMouseEvents}\n          onMouseLeave={removeListenMouseEvents}\n        >\n          <Control onClick={minimize}>close</Control>\n          <Control onClick={onTakeScreenshot}>screenshot</Control>\n          <Control\n            onClick={\n              equals(STATUS.recording, status)\n                ? onFinishRecordFrames\n                : onStartRecordFrames\n            }\n          >\n            {equals(STATUS.recording, status) ? 'finish' : 'record'}\n          </Control>\n        </Controls>\n      </Rnd>\n\n      <Overlay top={0} left={0} width=\"full\" height={prop('y', meta)} />\n      <Overlay\n        top={prop('y', meta)}\n        left={0}\n        width={prop('x', meta)}\n        height={prop('height', meta)}\n      />\n      <Overlay\n        top={prop('height', meta) + prop('y', meta)}\n        left={0}\n        width=\"full\"\n        height={\n          prop('height', size) - 40 - prop('height', meta) - prop('y', meta)\n        }\n      />\n      <Overlay\n        top={prop('y', meta)}\n        left={prop('width', meta) + prop('x', meta)}\n        width={prop('width', size) - prop('width', meta) - prop('x', meta)}\n        height={prop('height', meta)}\n      />\n    </Container>\n  )\n}\n","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\screens\\styles.tsx",["60"],"import { equals } from 'ramda'\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n  width: 100%;\n  height: 100vh;\n  overflow: hidden;\n  position: relative;\n`\n\ntype Props = {\n  width: number | string\n  height: number | string\n  top: number\n  left: number\n}\n\nexport const Overlay = styled.div.attrs<Props>(\n  ({ width, height, top, left }: Props) => ({\n    style: {\n      width: equals(width, 'full') ? '100%' : width + 'px',\n      height: equals(height, 'full') ? '100%' : height + 'px',\n      top: top + 'px',\n      left: left + 'px'\n    }\n  })\n)<Props>`\n  position: absolute;\n  z-index: 1;\n  background: rgba(0, 0, 0, 0.4);\n`\n\nexport const Meta = styled.div`\n  position: absolute;\n  top: -20px;\n  left: 0;\n`\n\nexport const Controls = styled.div`\n  width: max-content;\n  height: max-content;\n  position: absolute;\n  right: 0;\n  bottom: -20px;\n`\n\nexport const Control = styled.button``\n\nexport const style = (hasInitiatedResize: boolean) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  position: 'relative',\n  zIndex: 50,\n  border: `dashed 1px ${hasInitiatedResize ? 'white' : 'transparent'}`\n})\n","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\configs.js",[],"C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\helpers.ts",["61","62","63"],"import dayjs from 'dayjs'\r\nimport { isNil, prop, propEq } from 'ramda'\r\nconst { remote, desktopCapturer } = window.require('electron')\r\n\r\nexport const createFolderName = () => dayjs().format('yyyy-MM-dd@HH-mm-ss')\r\n\r\nexport const pixelToInteger = (string: string): number =>\r\n  parseInt(string.replace(/px/, ''))\r\n\r\nexport const wait = () =>\r\n  new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve('')\r\n    }, 500)\r\n  })\r\n\r\ntype CurrentDisplayProperties = {\r\n  id: string\r\n  size: {\r\n    width: number\r\n    height: number\r\n  }\r\n}\r\n\r\nexport const getIdAndSizeCurrentDisplay = (): CurrentDisplayProperties => {\r\n  const { screen } = remote\r\n\r\n  const cursor = screen.getCursorScreenPoint()\r\n  const { id, size } = screen.getDisplayNearestPoint({\r\n    x: cursor.x,\r\n    y: cursor.y\r\n  })\r\n\r\n  return {\r\n    id,\r\n    size\r\n  }\r\n}\r\n\r\ninterface Constraints {\r\n  audio: boolean\r\n  video: {\r\n    mandatory: {\r\n      chromeMediaSource: string\r\n      chromeMediaSourceId: string\r\n      minWidth: number\r\n      maxWidth: number\r\n      minHeight: number\r\n      maxHeight: number\r\n    }\r\n  }\r\n}\r\n\r\ntype GetUserMedia = {\r\n  getUserMedia(constraints: Constraints): Promise<MediaStream>\r\n}\r\n\r\ntype Source = {\r\n  id: string\r\n  display_id: string\r\n}\r\n\r\nexport const getSourceAndUserMedia = (\r\n  execute: (stream: MediaStream) => void\r\n) => {\r\n  const { id, size } = getIdAndSizeCurrentDisplay()\r\n\r\n  try {\r\n    desktopCapturer\r\n      .getSources({\r\n        types: ['screen']\r\n      })\r\n      .then(async (sources: Array<Source>) => {\r\n        const source: Source | undefined = sources.find(\r\n          propEq('display_id', String(id))\r\n        )\r\n\r\n        const { width, height } = size\r\n\r\n        /**\r\n         * @todo Do something when source isn't found.\r\n         */\r\n        if (isNil(source)) {\r\n          return\r\n        }\r\n\r\n        const stream = await (<GetUserMedia>(\r\n          navigator.mediaDevices\r\n        )).getUserMedia({\r\n          audio: false,\r\n          video: {\r\n            mandatory: {\r\n              chromeMediaSource: 'desktop',\r\n              chromeMediaSourceId: prop('id', source),\r\n              minWidth: width,\r\n              maxWidth: width,\r\n              minHeight: height,\r\n              maxHeight: height\r\n            }\r\n          }\r\n        })\r\n\r\n        execute(stream)\r\n      })\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n}\r\n","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\hooks\\index.js",[],"C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\hooks\\useTakeScreenshot.js",["64","65"],"import { IMAGE_TYPE, VIDEO_CSS } from 'configs'\nimport jimp from 'jimp'\nimport { useRef } from 'react'\n\nexport const useTakeScreenshot = ({ meta, minimize }) => {\n  const video = useRef(null)\n\n  const execute = (stream) => {\n    video.current = document.createElement('video')\n    video.current.style.cssText = VIDEO_CSS\n\n    video.current.onloadedmetadata = function () {\n      video.current.style.height = this.videoHeight + 'px'\n      video.current.style.width = this.videoWidth + 'px'\n\n      video.current.play()\n\n      const canvas = document.createElement('canvas')\n      canvas.width = this.videoWidth\n      canvas.height = this.videoHeight\n\n      const context = canvas.getContext('2d')\n      context.drawImage(video.current, 0, 0, canvas.width, canvas.height)\n\n      const base64 = canvas.toDataURL(IMAGE_TYPE)\n\n      video.current.remove()\n\n      const encondedImageBuffer = new Buffer(\n        base64.replace(/^data:image\\/(png|gif|jpeg);base64,/, ''),\n        'base64'\n      )\n\n      /**\n       * @todo We could remove jimp and just do it with canvas.\n       */\n      jimp.read(encondedImageBuffer, (error, image) => {\n        if (error) {\n          throw error\n        }\n\n        const { width, height, x, y } = meta\n\n        image\n          .crop(x, y, width, height)\n          .getBase64(IMAGE_TYPE, (error, base64data) => {\n            fetch(base64data)\n              .then((response) => response.blob())\n              .then(async (blob) => {\n                const item = new window.ClipboardItem({\n                  [IMAGE_TYPE]: blob\n                })\n\n                await navigator.clipboard.write([item])\n\n                minimize()\n              })\n          })\n      })\n\n      try {\n        stream.getTracks()[0].stop()\n      } catch (error) {\n        console.log(error)\n      }\n    }\n\n    video.current.srcObject = stream\n  }\n\n  return execute\n}\n","C:\\Users\\Zupper\\Desktop\\print\\packages\\desktop\\src\\hooks\\useFrames.js",["66","67","68"],"import { FRAME_RATE, IMAGE_TYPE, MAX_LENGTH, VIDEO_CSS } from 'configs'\nimport GIFEncoder from 'gif-encoder-2'\nimport { isNil, prop } from 'ramda'\nimport { useRef, useState } from 'react'\n\nconst { remote } = window.require('electron')\nconst fs = window.require('fs')\nconst { dialog, app } = remote\n\nexport const useFrames = ({ meta, minimize }) => {\n  const [frames, setFrames] = useState([])\n  // eslint-disable-next-line no-unused-vars\n  const [timeLimit, setTimeLimit] = useState(MAX_LENGTH)\n\n  const video = useRef(null)\n  const captureInterval = useRef(null)\n  const context = useRef(null)\n  const canvas = useRef(null)\n  const timeout = useRef(null)\n\n  const start = (stream) => {\n    canvas.current = document.createElement('canvas')\n\n    context.current = canvas.current.getContext('2d')\n    canvas.current.width = prop('width', meta)\n    canvas.current.height = prop('height', meta)\n\n    video.current = document.createElement('video')\n    video.current.style.cssText = VIDEO_CSS\n    video.current.srcObject = stream\n    document.body.appendChild(video.current)\n    video.current.onloadedmetadata = () => video.current.play()\n\n    captureInterval.current = setInterval(\n      onCaptureFrame,\n      Math.round(1000 / FRAME_RATE)\n    )\n\n    timeout.current = setInterval(() => {\n      setTimeLimit((cur) => cur - 1000)\n    }, 1000)\n  }\n\n  const onCaptureFrame = () => {\n    const { width, height, x, y } = meta\n\n    context.current.drawImage(\n      video.current,\n      x,\n      y,\n      width,\n      height,\n      0,\n      0,\n      width,\n      height\n    )\n\n    let frame = canvas.current.toDataURL(IMAGE_TYPE)\n\n    setFrames((frames) => [...frames, frame])\n  }\n\n  const finish = async () => {\n    const { width, height } = meta\n    minimize()\n\n    video.current.pause()\n    clearInterval(captureInterval.current)\n    clearInterval(timeout.current)\n\n    const canvas = document.createElement('canvas')\n    canvas.width = width\n    canvas.height = height\n\n    const ctx = canvas.getContext('2d')\n\n    const encoder = new GIFEncoder(width, height)\n    encoder.start()\n\n    const process = async (frame) => {\n      return new Promise((resolve) => {\n        const image = new Image()\n\n        image.onload = () => {\n          ctx.drawImage(image, 0, 0)\n          encoder.setDelay(100)\n          encoder.addFrame(ctx)\n          resolve()\n        }\n\n        image.src = frame\n      })\n    }\n\n    for (let frame of frames) {\n      await process(frame)\n    }\n\n    encoder.finish()\n\n    const buffer = encoder.out.getData()\n\n    const options = {\n      title: 'Save GIF',\n      defaultPath: app.getAppPath(),\n      buttonLabel: 'Save',\n      filters: [{ name: 'gif', extensions: ['gif'] }]\n    }\n\n    setFrames([])\n\n    dialog.showSaveDialog(options).then(({ filePath }) => {\n      if (isNil(filePath)) {\n        return\n      }\n\n      fs.writeFileSync(filePath, buffer, console.log)\n    })\n  }\n\n  return {\n    start,\n    finish\n  }\n}\n",{"ruleId":"69","severity":1,"message":"70","line":4,"column":20,"nodeType":"71","messageId":"72","endLine":4,"endColumn":25},{"ruleId":"69","severity":1,"message":"70","line":23,"column":21,"nodeType":"71","messageId":"72","endLine":23,"endColumn":26},{"ruleId":"69","severity":1,"message":"70","line":49,"column":22,"nodeType":"71","messageId":"72","endLine":49,"endColumn":54},{"ruleId":"69","severity":1,"message":"70","line":5,"column":33,"nodeType":"71","messageId":"72","endLine":5,"endColumn":38},{"ruleId":"69","severity":1,"message":"70","line":10,"column":21,"nodeType":"71","messageId":"72","endLine":10,"endColumn":26},{"ruleId":"69","severity":1,"message":"70","line":63,"column":38,"nodeType":"71","messageId":"72","endLine":65,"endColumn":5},{"ruleId":"69","severity":1,"message":"70","line":5,"column":34,"nodeType":"71","messageId":"72","endLine":5,"endColumn":57},{"ruleId":"69","severity":1,"message":"73","line":5,"column":35,"nodeType":"74","messageId":"75","endLine":5,"endColumn":53},{"ruleId":"69","severity":1,"message":"70","line":10,"column":26,"nodeType":"71","messageId":"72","endLine":10,"endColumn":49},{"ruleId":"69","severity":1,"message":"73","line":10,"column":27,"nodeType":"74","messageId":"75","endLine":10,"endColumn":45},{"ruleId":"76","severity":1,"message":"77","line":13,"column":10,"nodeType":"78","messageId":"79","endLine":13,"endColumn":19},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Object pattern argument should be typed.","ObjectPattern","missingArgTypeUnnamed","@typescript-eslint/no-unused-vars","'timeLimit' is assigned a value but never used.","Identifier","unusedVar"]